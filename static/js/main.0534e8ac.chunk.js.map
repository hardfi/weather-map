{"version":3,"sources":["logo.svg","const/creds.js","components/MapContainer/MapContainer.js","components/Header/Header.js","components/Sidebar/Sidebar.js","pages/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","OPEN_WEATHER_CONFIG","MapContainer","this","props","weather","google","coord","temp","Math","round","main","icon","process","lon","zoom","initialCenter","className","center","position","label","fontWeight","fontSize","text","url","React","Component","GoogleApiWrapper","apiKey","Header","src","logo","alt","Sidebar","getUserLocation","navigator","geolocation","getCurrentPosition","setState","lat","coords","latitude","lng","longitude","updateWeather","err","setLocationFromStorage","console","log","handleInput","event","input","target","value","handleEnterKey","e","key","preventDefault","state","handleClick","city","JSON","parse","localStorage","getItem","setInterval","fetch","then","resp","json","data","name","onWeatherUpdate","saveCityToLocalStorage","toast","error","catch","setItem","stringify","pressure","speed","wind","description","TextField","id","onChange","onKeyPress","Button","variant","color","onClick","Main","handleWeatherUpdate","currentLocation","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0534e8ac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const GOOGLE_API_KEY = 'AIzaSyBFY-lhRs26UcJ7Pa5dQKT0Rt6_vzyrz1w';\nexport const OPEN_WEATHER_CONFIG = {\n  key: 'c25f3c202404d3738117f9c16f15bb2e',\n  lang: 'en',\n  system: 'metric'\n};\n","import React from 'react';\nimport {Map, Marker, GoogleApiWrapper} from 'google-maps-react';\nimport {GOOGLE_API_KEY} from '../../const/creds';\nimport './MapContainer.scss';\n\nexport class MapContainer extends React.Component {\n  render() {\n    const {weather, google} = this.props;\n    if (!!weather) {\n      const {coord} = weather;\n      const temp = Math.round(weather.main.temp);\n      const icon = `${process.env.PUBLIC_URL}/icons/${weather.weather[0].icon}.png`;\n      coord['lng'] = coord.lon;\n      return (\n        <Map google={google}\n             zoom={9}\n             initialCenter={coord}\n             className='MapContainer'\n             center={coord}>\n          <Marker\n            position={coord}\n            label={{fontWeight: 'bold', fontSize: '18px', text: `${temp}\\u00b0C`}}\n            icon={{\n              url: icon,\n            }}/>\n        </Map>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: (GOOGLE_API_KEY)\n})(MapContainer)\n","import React from 'react';\nimport logo from '../../logo.svg';\nimport './Header.scss';\n\nexport class Header extends React.Component {\n  render() {\n    return (\n      <div className='Header'>\n        <img src={logo} className=\"Header-logo\" alt=\"logo\"/>\n        <div className=\"header-container\">\n          <h2>Show weather in a chosen city/area</h2>\n          <h6>Powered by: Google Maps & OpenWeater</h6>\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport {OPEN_WEATHER_CONFIG} from '../../const/creds';\nimport './Sidebar.scss';\nimport {Button, TextField} from '@material-ui/core';\nimport {toast} from 'react-toastify';\n\nexport class Sidebar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      city: '',\n      lat: '',\n      lng: ''\n    }\n  }\n\n  componentDidMount() {\n    this.getUserLocation();\n  }\n\n  getUserLocation = () => {\n    navigator.geolocation.getCurrentPosition(\n      position => this.setState({\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      }, () => {\n        this.updateWeather();\n      }), err => {\n        this.setLocationFromStorage();\n        console.log(err);\n      }\n    )\n  };\n\n  setLocationFromStorage() {\n    let city = JSON.parse(localStorage.getItem('city')) || 'Warsaw';\n    this.updateWeather(city);\n    this.setState({\n        city: city\n      }, () => {\n        setInterval(() => {\n          this.updateWeather(this.state.city);\n        }, 1000 * 60 * 15)\n      } // weather update every 15 minutes\n    )\n  }\n\n  updateWeather(city) {\n    let url;\n    if (city) {\n      url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${OPEN_WEATHER_CONFIG.key}&lang=${OPEN_WEATHER_CONFIG.lang}&units=${OPEN_WEATHER_CONFIG.system}`;\n    } else {\n      url = `https://api.openweathermap.org/data/2.5/weather?lat=${this.state.lat}&lon=${this.state.lng}&appid=${OPEN_WEATHER_CONFIG.key}&lang=${OPEN_WEATHER_CONFIG.lang}&units=${OPEN_WEATHER_CONFIG.system}`\n    }\n\n    fetch(url).then(resp => {\n      return resp.json();\n    }).then(data => {\n      if (!data.name) {\n        toast.error(\"Cannot find this place on OpenWeather!\");\n      } else {\n        this.props.onWeatherUpdate(data);\n        this.setState({\n          input: '',\n          city: data.name\n        }, () => this.saveCityToLocalStorage());\n      }\n    }).catch(err => console.log(err));\n  };\n\n  handleInput = (event) => {\n    this.setState({\n      input: event.target.value\n    })\n  };\n\n  handleEnterKey = (e) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      this.updateWeather(this.state.input);\n    }\n  };\n\n  handleClick = () => {\n    this.updateWeather(this.state.input);\n  };\n\n  saveCityToLocalStorage() {\n    localStorage.setItem('city', JSON.stringify(this.state.city));\n  }\n\n  render() {\n    const {weather} = this.props;\n    if (!!weather) {\n      let temp = Math.round(weather.main.temp);\n      let pressure = Math.round(weather.main.pressure);\n      let speed = Math.round(weather.wind.speed);\n      return (\n        <div className='weather'>\n          <h2>{weather.name}</h2>\n          <h3>{weather.weather[0].description}</h3>\n          <h3>Temperature: {temp}&#176;C </h3>\n          <h3>Pressure: {pressure} hPa</h3>\n          <h3>Wind: {speed} m/s</h3>\n          <div className='form'>\n            <TextField id=\"standard-basic\"\n                       label=\"Enter city or country\"\n                       onChange={this.handleInput}\n                       value={this.state.input}\n                       className='input'\n                       onKeyPress={e => this.handleEnterKey(e)}/>\n            <Button variant=\"contained\" color=\"primary\" onClick={this.handleClick}>Search</Button>\n          </div>\n        </div>\n      )\n    } else {\n      return null;\n    }\n  }\n}\n","import React from 'react';\nimport MapContainer from '../components/MapContainer/MapContainer';\nimport {Header} from '../components/Header/Header';\nimport {Sidebar} from '../components/Sidebar/Sidebar';\nimport {ToastContainer} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport class Main extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      weather: '',\n      currentLocation: ''\n    }\n  }\n\n  handleWeatherUpdate = (weather) => {\n    this.setState({\n      weather: weather,\n    });\n  };\n\n  render() {\n    return (\n      <div className='container'>\n        <div className=\"row\">\n          <Header/>\n        </div>\n        <div className=\"row main-content\">\n          <div className=\"col\">\n            <Sidebar onWeatherUpdate={this.handleWeatherUpdate} weather={this.state.weather}/>\n          </div>\n          <div className=\"map-main\">\n            <MapContainer weather={this.state.weather} />\n          </div>\n        </div>\n        <ToastContainer/>\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport './style/App.scss';\nimport { Main } from './pages/Main'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}